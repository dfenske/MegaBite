@model MegaBite.Domain.Model.Recipe
@using MegaBite.Data.Provider.Mock

@{
    ViewBag.Title = "Create a recipe";
    IEnumerable<SelectListItem> ingredientsList = new IngredientMockProvider().GetAllIngredients().Select(x => new SelectListItem { Text = x.Value.Name, Value = x.Value.Id.ToString() });
    @Scripts.Render("~/Scripts/customjs/createRecipe.js");
}

<h2>Create a recipe</h2>

@using (Html.BeginForm("Create", "Recipe", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeToMakeInMinutes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TimeToMakeInMinutes, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eg. 1.5", @type = "number" } })
                @Html.ValidationMessageFor(model => model.TimeToMakeInMinutes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Serves, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Serves, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.Serves, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ingredients, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4" id="ingredientsSection">
                @Html.DropDownListFor(model => model.Ingredients, ingredientsList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Ingredients, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <input type="button" name="addIngredient" value="+" onclick="createIngredientInput();" class="btn btn-add btn-info" />
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Steps, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Steps, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Steps, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Notes, new
               {
                   @class = "form-control",
                   @placeholder = "Enter notes separated by commas."
               }
           )
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Tags, htmlAttributes: new { @class = "form-control", @placeholder = "Enter tags separated by commas. Eg. 'Vegetarian, Easy, Dinner'" })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4" id="fileSection">
                <input type="file" id="image" name="image" />
                @Html.ValidationMessageFor(model => model.Images, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <input type="button" name="addFile" value="+" onclick="createFileInput();" class="btn btn-add btn-info" />
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>